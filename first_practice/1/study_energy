.data
   password: .string "one"
.text
main:
	la a0 password
	jal ra study_energy
  
	li a7 10
	ecall

study_energy:
	# save ra
  	addi sp sp -4
	sw ra 0(sp)
	
    mv t0 a0 # save passord adress into t0
    
	li t1 26 # counter to compare with every letter of the alphabet
  	li a2 'a' # starts with a

loop2: beqz t1 end2 # counter == 0 -> end
	# print char
  	mv a0 a2
    li a7 11
    ecall
    
    # save char in the stack
    addi sp sp -4
    sb a2 0(sp) # for the letter
    sb x0 1(sp) # adding a 0 to convert into string
	
    mv a0 t0 # adress0 = saved password
    mv a1 sp # address1 = character
  	
    rdcycle t2 # start time
  	jal ra string_compare  # compare with the letter in a1
	rdcycle t3 # end time
  	sub t3 t3 t2 # total time
    
    # print ':'
    li a7 11
    li a0 ':'
    ecall
    # print ' '
    li a0 ' '
    ecall
    # print cycles
	li a7 1
    mv a0 t3
	ecall
    # next line
    li a7 11
	li a0 10
	ecall
    
  	addi a2 a2 1 # next letter
  	addi t1 t1 -1 # counter -= 1
  	j loop2

end2:
  	lw ra 0(sp) # restore the previous ra
    addi sp sp 4 # restore the stack
	jr ra
    
# SAME FUNCTIONS AS EX 1
    
string_compare: # a0 = adress1, a1 = adress2 -> return[1, 0, -1] = a0
    lbu t4 0(a0) # char1 = adress1[0]
    lbu t5 0(a1) # char2 = adress2[0]
    
    # if char1 == 0 and char2 == 0: error
    bnez t4 buc1 
    beqz t5 error

buc1: beqz t4 try # if char1 == 0 -> check if char2 == 0
    bne t4 t5 not_eq # if char1 != char2 -> not eq
    addi a0 a0 1 # address1 + 1
    addi a1 a1 1 # address2 + 1
    lbu t4 0(a0) # set next char into registers
    lbu t5 0(a1)
    j buc1

try: bnez t5 not_eq # char2 also == 0: both words have the same length and characters -> return 1
    li a0 1 # its the same word, so 1
    jr ra
not_eq:
    li a0 0 # different words -> return 0
    jr ra
error:
    li a0 -1 # both words 0 -> return -1
    jr ra
