#
# WepSIM (https://wepsim.github.io/wepsim/)
#


##
## Microcode Section
##

begin
{
    fetch:          (T2, C0),
                    (TA, R, BW=11, M1=1, C1=1),
                    (M2, C2, T1, C3),
                    (A0, B=0, C=0)
}

lui RRE1, U32 {
            co= 010010,
            nwords=2,
            RRE1=reg(25,21),
						U32=inm(63,32),
  					help='r1 = r2 & r3',
            {
                (T2, C0),
                (M2, C2, TA, R, BW=11, M1, C1)
                (T1, LC, SELC=10101, A0=1, B=1, C=0)
            }
  
}

add RRE1, RRE2, RRE3 {
  					# CO (31-26): 011000
            co=011000,
            nwords=1,
            RRE1=reg(25,21),
            RRE2=reg(20,16),
            RRE3=reg(15,11),
            help='r1 = r2 + r3',
            {
              	# BR[RRE1] ← BR[RRE2] + BR[RRE3]
                (MC = 1,MR=0, SELA=10000, SELB=1011, SELCOP = 1010, T6 = 1, LC= 1, SELC=10101, SELP = 11, M7 = 1, C7, A0=1, B=1, C=0), # RB = RRE3, # RA = RRE2, # RC = RRE1
            }
  
}

mul_add RRE1, RRE2, RRE3, RRE4 {
  					# CO (31-26): 011001
            co=011001,
            nwords=1,
            RRE1=reg(25,21),
            RRE2=reg(20,16),
            RRE3=reg(15,11),
  					RRE4=reg(10,4),
            help='r1 = (r2 * r3) + r4',
            {
              	# RT1 <- BR[RRE2] * BR[RRE3]
              	# BR[RRE1] ← RT1 + BR[RRE4]	
                (MC = 1,MR=0, SELA=10000, SELB=1011, SELCOP = 1100,MA=0,MB=0, T6 = 1, C4 = 1),
								(MC = 1,MA = 1, MR=0, SELB=100, MB=0, SELCOP = 1010, T6 = 1, LC = 1, SELC=10101 ,SELP= 11, M7 = 1, C7, A0=1, B=1, C=0)
            }
}



registers
{
	0=(zero,  x0),
	1=(ra,    x1),
	2=(sp,    x2) (stack_pointer),
	3=(gp,    x3),
	4=(tp,    x4),
	5=(t0,    x5),
	6=(t1,    x6),
	7=(t2,    x7),
	8=(s0,    x8),
	9=(s1,    x9),
	10=(a0,  x10),
	11=(a1,  x11),
	12=(a2,  x12),
	13=(a3,  x13),
	14=(a4,  x14),
	15=(a5,  x15),
	16=(a6,  x16),
	17=(a7,  x17),
	18=(s2,  x18),
	19=(s3,  x19),
	20=(s4,  x20),
	21=(s5,  x21),
	22=(s6,  x22),
	23=(s7,  x23),
	24=(s8,  x24),
	25=(s9,  x25),
	26=(s10, x26),
	27=(s11, x27),
	28=(t3,  x28),
	29=(t4,  x29),
	30=(t5,  x30),
	31=(t6,  x31)
}



###
lui RRE1, U32 :: BR[RRE1] ← U32
""""""""""""""""""""""""""""""""""""""""""""""""""
   # RT2 ← RE1                    RA = RE1, T6,

MAR <- PC
PC = PC + 4

MBR ← M[MAR]

BR[RRE1] <- MBR""""""""""""""""""""""""""""""""""""""""""""""""""

### sw RRE1, @(RRE2) :: Memory[RRE2] ← BR[RRE1]

MBR ← RRE1															; RA = RRE1, T9, C1

MAR ← RRE2															; RA = RRE2, T9, C0

M[MAR] ← MBR													  ; Ta, W, BW = 11, Td

jump to microfetch

### lw RRE1, @(RRE2) :: BR[RRE1] ← Memory [RRE2] 

MAR ← RRE2															; RA = RRE2, T9, C0

MBR ← M[MAR]														; Ta, R, BW 11, M1, C1

RRE1 ← MBR 															; T1, LC, RC = RRE1

### add RRE1, RRE2, RRE3 :: BR[RRE1] ← BR[RRE2] + BR[RRE3]

BR[RRE1] ← BR[RRE2] + BR[RRE3]  				; RA = RRE2, RB = RRE3, COP = add, T6, LC, RC = RRE1, SELP = 11, M7 = 1, C7


### mul_add RRE1, RRE2,RRE3, RRE3 :: BR[RRE1] ← BR[RRE2] * BR[RRE3] + BR[RRE4]

RT1 <- BR[RRE2] * BR[RRE3] 							; RA = RRE2, RB = RRE3, COP = multiplication, T6, C4

BR[RRE1] ← RT1 + BR[RRE4]								; MA = 1, RB = RRE4, COP = add, T6, LC, RC = RRE1, SELP = 11, M7 = 1, C7

### beq RRE1, RRE2, S10 :: IF (RRE1 == RRE2):
 																PC ← PC + S10

RRE1 - RRE2 * 0 -> end										; RA = RRE1, RB == RRE2, COP = substract, A0 = 0, B=0, C3= 0, C2 = 1, C1 = 1, C0 = 0

end:
RT2 ← PC																; T2, C5

RT1 ← IR(S10)														; SE = 1, Size=10, Offset = 0, T3, C4

PC ← RT1 + RT2													; MA = 1, MB = 01, COP = add, T6, C2

### jal U16 :: BR[ra] ← PC | PC ← U16

BR[ra] ← PC															; T2, LC, RC = @R1

PC ← U16																; Size = 16, Offset = 0, T3, C2

### jr_ra :: PC ← BR[ra]

PC ← ra																		; RA = @R1, T9, C2

### halt :: PC ← 0x00 | SR ← 0x00
PC ← @R0 | SR ← @R0												; RA = @R0, T9, C2, C7
  																								
### xchb (RRE1), (RRE2)


