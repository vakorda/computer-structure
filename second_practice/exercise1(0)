add reg1 reg2 reg3 {
            co=010010,
            cop=1001, #?
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            reg3=reg(15,11),
            help='r1 = r2 + r3',
            {
                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1010, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0),
								(C0=1)
            }
  
}

###
lui RRE1, U32 :: BR[RRE1] ← U32
""""""""""""""""""""""""""""""""""""""""""""""""""
   # RT2 ← RE1                    RA = RE1, T6,

MAR <- PC
PC = PC + 4

MBR ← M[MAR]

BR[RRE1] <- MBR""""""""""""""""""""""""""""""""""""""""""""""""""

### sw RRE1, @(RRE2) :: Memory [RRE1] ← BR[RRE2]

MBR ← RRE2															; RA = RRE2, T9, C1

MAR ← RRE1															; RA = RRE1, T9, C0

M[MAR] ← MBR													  ; Ta, W, BW = 11, Td

jump to microfetch

### lw RRE1, @(RRE2) :: BR[RRE1] ← Memory [RRE2] 

MAR ← RRE2															; RA = RRE2, T9, C0

MBR ← M[MAR]														; Ta, R, BW 11, M1, C1

RRE1 ← MBR 															; T1, LC, RC = RRE1

### add RRE1, RRE2, RRE3 :: BR[RRE1] ← BR[RRE2] + BR[RRE3]

BR[RRE1] ← BR[RRE2] + BR[RRE3]  				; RA = RRE2, RB = RRE3, COP = add, T6, LC, RC = RRE1, SELP = 11, M7 = 1, C7


### mul_add RRE1, RRE2,RRE3, RRE3 :: BR[RRE1] ← BR[RRE2] * BR[RRE3] + BR[RRE4]

RT1 <- BR[RRE2] * BR[RRE3] 							; RA = RRE2, RB = RRE3, COP = multiplication, T6, C4

BR[RRE1] ← RT1 + BR[RRE4]								; MA = 1, RB = RRE4, COP = add, T6, LC, RC = RRE1, SELP = 11, M7 = 1, C7

### beq RRE1, RRE2, S10 :: IF (RRE1 == RRE2):
 																PC ← PC + S10

RRE1 - RRE2 * 0 -> end										; RA = RRE1, RB == RRE2, COP = substract, A0 = 0, B=0, C3= 0, C2 = 1, C1 = 1, C0 = 0

end:
RT2 ← PC																; T2, C5

RT1 ← IR(S10)														; SE = 1, Size=10, Offset = 0, T3, C4

PC ← RT1 + RT2													; MA = 1, MB = 01, COP = add, T6, C2

### jal U16 :: BR[ra] ← PC | PC ← U16

BR[ra] ← PC															; T2, LC, RC = @R1

PC ← U16																; Size = 16, Offset = 0, T3, C2

### jr_ra :: PC ← BR[ra]

PC ← ra																		; RA = @R1, T9, C2

### halt :: PC ← 0x00 | SR ← 0x00
PC ← @R0 | SR ← @R0												; RA = @R0, T9, C2, C7
  																								
### xchb (RRE1), (RRE2)






